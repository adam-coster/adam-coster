root: true
env:
  browser: true
  es2020: true
  mocha: true
  node: true
parserOptions:
  ecmaVersion: latest
  parser: "@typescript-eslint/parser"
  sourceType: module
  project:
    - "./tsconfig.json"
    - "./projects/**/tsconfig.json"
    - "**/tsconfig.json"
plugins:
  - "@typescript-eslint"
  - prettier
extends:
  - eslint:recommended
  - plugin:@typescript-eslint/recommended
ignorePatterns:
  - "**/*.js"
  - "**/*.ts"
  - "**/*.mjs"
  - "**/*.cjs"
  - "!projects/*/*.js"
  - "!projects/**/src/**/*.js"
  - "!projects/**/src/**/*.ts"

rules:
  "@typescript-eslint/no-floating-promises": error
  "@typescript-eslint/no-extra-semi": off
  "@typescript-eslint/no-namespace": off
  "@typescript-eslint/ban-ts-comment": warn
  "@typescript-eslint/no-empty-interface": off
  "@typescript-eslint/ban-types":
    - warn
    - types:
        Boolean:
          fixWith: boolean
          message: Use boolean instead
        Number:
          fixWith: number
          message: Use number instead
        Object:
          fixWith: "{}"
          message: "'Object' means 'any nullish value'."
        String:
          fixWith: string
          message: Use string instead
        Symbol:
          fixWith: symbol
          message: Use symbol instead
  "@typescript-eslint/no-empty-function": warn
  "@typescript-eslint/no-explicit-any": off
  "@typescript-eslint/no-misused-new": off
  "@typescript-eslint/no-non-null-assertion": off
  "@typescript-eslint/no-this-alias": off
  "@typescript-eslint/no-unused-vars": warn
  "@typescript-eslint/no-var-requires": off
  camelcase: off
  comma-dangle:
    - error
    - only-multiline
  eqeqeq: off
  getter-return: off
  key-spacing: off
  no-constant-condition: off
  no-empty: off
  no-prototype-builtins: off
  no-redeclare: off
  no-restricted-imports:
    - error
    - paths:
        - console
  no-unused-vars: off
  quotes: off
  require-await: error
  space-before-function-paren: off
  no-control-regex: warn
  no-misleading-character-class: warn
overrides: []
